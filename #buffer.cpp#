/**
 * @author See Contributors.txt for code contributors and overview of BadgerDB.
 *
 * @section LICENSE
 * Copyright (c) 2012 Database Group, Computer Sciences Department, University of Wisconsin-Madison.
 */

#include <memory>
#include <iostream>
#include "buffer.h"
#include "exceptions/buffer_exceeded_exception.h"
#include "exceptions/page_not_pinned_exception.h"
#include "exceptions/page_pinned_exception.h"
#include "exceptions/bad_buffer_exception.h"
#include "exceptions/hash_not_found_exception.h"

namespace badgerdb { 

BufMgr::BufMgr(std::uint32_t bufs)
	: numBufs(bufs) {
	bufDescTable = new BufDesc[bufs];

  for (FrameId i = 0; i < bufs; i++) 
  {
  	bufDescTable[i].frameNo = i;
  	bufDescTable[i].valid = false;
  }

  bufPool = new Page[bufs];

	int htsize = ((((int) (bufs * 1.2))*2)/2)+1;
  hashTable = new BufHashTbl (htsize);  // allocate the buffer hash table

  clockHand = bufs - 1;
}

/**
 *  Clean up the class; delete dynamically allocated memory.
*/
BufMgr::~BufMgr() {
	for (int i=0; i < bufs; i++) {
		delete bufDescTable[i];
		delete bufPool[i];
	}

	for (int j=0; j < htsize; j++) {
		delete hashTable[j];
	}
}

/**
 * Iterate the clockHand with wraparound
*/
void BufMgr::advanceClock()
{
	clockHand = (clockHand+1) % numBufs;
}

/**
 * If all buffer frames are pinned, throw an exception.
 * Otherwise, call advanceClock doing a full 2 sweeps
 *  (to allow unsetting the reference bit.)
 * The first frame that is not pinned, not recently referenced
 *  will be selected and initialized.
 *
 * @throws BufferExceededException
*/
void BufMgr::allocBuf(FrameId & frame) 
{
	// Check that all frames aren't pinned.
	int numPinned=0;
	for (int i=0; i < bufs; i++) {
		if (bufDescTable[i]->pinCnt > 0)
			numPinned++;
	}
	if (numPinned == bufs) {
		throw BufferExceededException;
	}

	// Run the clock algorithm.
	BufDesc* tmpbuf;
	for (int i=0; i < bufs*2; i++) {
		advanceClock();
		tmpbuf = bufDescTable[clockHand];
		if ( !tmpbuf->valid ) { // Use this; done.
			// Leave blank; will be set by readPage()
			tmpbuf->Set(NULL, Page::INVALID_NUMBER);
			return;
		} // look for free buffer.
		// skip pinned ones..
		if (  tmpbuf->pinCnt > 0 ) {
			++numPinned;
			continue;
		} // ..and referenced ones.
		else if ( tmpbuf->refBit ) {
			tmpbuf->refBit = false;
			continue;
		} // found a free one.
		else {
			if (tmpbuf->dirty) {
				// it has to have a page and file.
				PageId page = tmpbuf->pageNo;
				tmpbuf->file->WritePage(pageNo);
			}
			frame = tmpbuf->frameNo;
			// Leave blank for ReadPage()
			tmpbuf->Set(NULL, Page::INVALID_NUMBER);
		}

		

	}


}

/**
 * given a file object and page number, will return a page object
 *  in memory. Whether the page had to be read from disk or was already there
 *  will be transparent to the caller.
 *
 * If the read was successful, `page` will be populated with the page object.
*/

void BufMgr::readPage(File* file, const PageId pageNo, Page*& page)
{
	try {
		hashTable.lookup(file, pageNo, frameNo);
		bufDescTable[frameNo].pinCnt++;
		bufDescTable[frameNo].refBit = true;
		page = bufDescTable[frameNo].file;
	} catch (HashNotFoundException) {
		BufMgr::allocBuf(frameNo);
		hashTable.insert(file, pageNo, frameNo);
		bufDescTable[frameNo].Set(file, pageNo);
		page = file->readPage(pageNo);
	}
}

/*
 Given the file and pageNo, will unpin the page and set dirty.
 If the file and page isn't in the buffer pool, throw fileexistexception
 or invalidpageexception.
*/
void BufMgr::unPinPage(File* file, const PageId pageNo, const bool dirty) 
{
	bool found = false;
	for (std::uint32_t i = 0; i < numBufs; i++)
	{
		tmpbuf = &(bufDescTable[i]);
		if (tmpbuf->file == file && tmpbuf->pageNo == pageNo)
		{
			found = true;
			(tmpbuf->pinCnt)--;
		}
	}
	if (!found) {
		throw InvalidPageException();
	}
}

/*
 Writes the file to the disk.
 Iterate over all page frames, flushing the dirty ones to disk.
*/
void BufMgr::flushFile(const File* file) 
{
  BufDesc* tmpbuf;
//      int validFrames = 0;

  for (std::uint32_t i = 0; i < numBufs; i++)
        {
        tmpbuf = &(bufDescTable[i]);

        if (tmpbuf->valid != true)
		continue; // no need to examine this
	if (tmpbuf->file != file)
		continue;
	if (tmpbuf->dirty)
		file.writePage(tmpbuf.pageNo);
  }

  //      std::cout << "Total Number of Valid Frames:" << validFrames << "\n";	
}

void BufMgr::allocPage(File* file, PageId &pageNo, Page*& page) 
{
	page = &file->allocatePage();
	pageNo = page->page_number();
}

void BufMgr::disposePage(File* file, const PageId PageNo)
{
    file.deletePage(PageNo);
    for (std::uint32_t i = 0; i < numBufs; i++)
    {
      tmpbuf = &(bufDescTable[i]);
      if (!tmpbuf->valid)
        continue;
      if (tmpbuf->file == file && tmpbuf->pageNo == PageNo)
        tmpbuf->clear();
    }
}

void BufMgr::printSelf(void) 
{
  BufDesc* tmpbuf;
	int validFrames = 0;
  
  for (std::uint32_t i = 0; i < numBufs; i++)
	{
  	tmpbuf = &(bufDescTable[i]);
		std::cout << "FrameNo:" << i << " ";
		tmpbuf->Print();

  	if (tmpbuf->valid == true)
    	validFrames++;
  }

	std::cout << "Total Number of Valid Frames:" << validFrames << "\n";
}

}
